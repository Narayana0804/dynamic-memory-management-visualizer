Create a fully functional Dynamic Memory Management Visualizer website using HTML, CSS, and JavaScript for the frontend and Flask (Python) for the backend. The tool should simulate and visualize memory management techniques like paging, segmentation, and virtual memory. Follow these detailed requirements:"

üåê Frontend (HTML, CSS, JavaScript)
1Ô∏è‚É£ Landing Page
Create a clean and modern homepage with:

A header with the title: "Dynamic Memory Management Visualizer"

A hero section with a short description: "Simulate paging, segmentation, and virtual memory techniques with real-time visualization."

A Start Simulation button that redirects to the simulation dashboard.

2Ô∏è‚É£ Simulation Dashboard (Main Page)
A two-panel layout:

Left Panel (User Input Form):

Dropdown to select Memory Management Technique (Paging / Segmentation).

Number input for Memory Size and Page Size.

Dropdown for Page Replacement Algorithm (FIFO, LRU).

A Start Simulation button.

Right Panel (Memory Visualization):

A dynamic grid layout showing allocated memory blocks.

Color coding:

Green: Allocated memory

Red: Page faults

Gray: Free memory

A Live Page Fault Indicator that blinks when a fault occurs.

A Step-by-Step Execution button to visualize each memory operation.

3Ô∏è‚É£ Results & Analytics Section
A table showing:

Total page faults

Hit/miss ratio

A bar chart displaying memory utilization

A Reset Button to start a new simulation

üé® Styling (CSS)
Use modern CSS (Flexbox & Grid) for layout.

Add hover effects and smooth transitions for UI elements.

Ensure mobile responsiveness so the visualizer works on all devices.

Color Theme: Dark mode with green, blue, and red accents.

üõ†Ô∏è Backend (Flask + Python)
The backend handles memory allocation logic and serves data to the frontend.

Backend Logic:
Implement memory management techniques:
‚úÖ Paging
‚úÖ Segmentation
‚úÖ Virtual Memory Handling
‚úÖ FIFO & LRU Page Replacement Algorithms

API Endpoints (Flask)
POST /start_simulation ‚Üí Initializes memory with user input

GET /next_step ‚Üí Sends the next memory state for visualization

GET /results ‚Üí Returns total page faults and memory statistics

How Backend Works:
Simulates memory operations using lists and dictionaries.

Tracks page faults and memory usage dynamically.

Sends step-by-step memory states to the frontend via AJAX (JavaScript fetch API).

üîπ Additional Features
‚úÖ Animations using JavaScript (CSS transitions & Canvas API for visualization).
‚úÖ Data Fetching using JavaScript fetch() to communicate with Flask API.
‚úÖ Deploy Backend on Render/Heroku & Frontend on GitHub Pages/Vercel.

üìù Expected Output
A fully interactive memory visualizer that lets users simulate paging, segmentation, and virtual memory.

Color-coded memory visualization showing real-time page faults and memory allocation.

A Flask API backend that computes and returns step-by-step memory states to the frontend.

Charts and tables for analyzing memory performance (hit/miss ratio, memory utilization).

